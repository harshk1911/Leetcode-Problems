//Problem Name : Word Search
//Difficulty : Medium
//Link : https://leetcode.com/problems/word-search/description/

class Solution {
    //Matrix to store position of letters used
    public static int[][] letterUsed;
    public boolean exist(char[][] board, String word) {
        letterUsed = new int[board.length][board[0].length];
        for(int i = 0;i < board.length;i ++)
        {
            for(int j = 0;j < board[0].length;j ++)
            {
                if(board[i][j] == word.charAt(0))
                {
                    letterUsed[i][j] = 1;
                    if(backtrack(word,board,i,j,0))
                    {
                        return true;
                    }
                    letterUsed[i][j] = 0;
                }
            }
        }
        return false;
    }
    public boolean backtrack(String word,char[][] board,int row,int col,int pos)
    {
        //Base condition
        if((pos + 1) == word.length())
        {
            return true;
        }
        //Check if going right will give solution 
        if(isSafe(board,row,col + 1,word,pos+1))
        {
            if(backtrack(word,board,row,col + 1,pos + 1))
            {
                return true;
            }
            letterUsed[row][col + 1] = 0;
        }
        //Check if going down will give solution
        if(isSafe(board,row + 1,col,word,pos+1))
        {
            if(backtrack(word,board,row + 1,col,pos + 1))
            {
                return true;
            }
            letterUsed[row + 1][col] = 0;
        }
        //Check if going up will give solution
        if(isSafe(board,row - 1,col,word,pos+1))
        {
            if(backtrack(word,board,row - 1,col,pos + 1))
            {
                return true;
            }
            letterUsed[row - 1][col] = 0;
        }
        //Check if going left will give solution
        if(isSafe(board,row,col - 1,word,pos+1))
        {
            if(backtrack(word,board,row,col - 1,pos + 1))
            {
                return true;
            }
            letterUsed[row][col - 1] = 0;
        }
        return false;
    }
    public boolean isSafe(char[][] board,int row,int col,String word,int pos)
    {
        if(row >= board.length || row < 0 || col >= board[0].length || col < 0)
        {
            return false;
        }
        //Check if letter matches and letter is not used
        if((board[row][col] == word.charAt(pos)) && letterUsed[row][col] != 1)
        {
            letterUsed[row][col] = 1;
            return true;
        }
        return false;
    }
}
