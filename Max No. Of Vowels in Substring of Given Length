//Problem Name : Maximum Number of Vowels in a Substring of Given Length
//Difficulty : Medium
//Link : https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/description/
//Approach : Check if character in string is vowel. If yes then store 1 in an array for identifying vowels in string. Find total vowels for first k characters.
             Later just add value for current char(i.e i) and subtract value from (i-k).
//Code

class Solution {
    public int maxVowels(String s, int k) {
        int tot = 0;
        int max = 0;
        int[] isVowel = new int[s.length()];
        for(int i=0;i < s.length();i ++)
        {    
            char v = s.charAt(i);
            if(v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u')
                isVowel[i] = 1;
            if(i == k - 1)
            {
                for(int j = 0;j <= i;j ++)
                {
                    tot = tot + isVowel[j];
                }
            }
            else if(i > k - 1)
            {
                tot = tot + isVowel[i] - isVowel[i - k];
            }
            if(tot == k)
                return k;
            if(tot > max)
                max = tot;
        }
        return max;
    }
}

//Other Approach : Create an array with count of vowels till nth char. Traverse the array and check max vowels in any k characters.
//Code :
class Solution {
    public int maxVowels(String s, int k) {
        
        int n = s.length();
        int[] arr = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                count++;
            }
            arr[i] = count;
        }
        int max = 0;
        for (int i = 0; i <= n - k; i++) {
            int end = i + k - 1;
            if (i == 0) {
                max = Math.max(max, arr[end]);
            } else {
                max = Math.max(max, arr[end] - arr[i - 1]);
            }
        }
        return max;
    }
}
