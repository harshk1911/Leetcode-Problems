Problem : Median of Two Sorted Arrays
Difficulty : Hard
URL : https://leetcode.com/problems/median-of-two-sorted-arrays/description/
Approach : Combine both arrays to create third sorted array. Find median of third array.
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int len1 = nums1.length;
    int len2 = nums2.length;
    int mid = (len1 + len2) / 2;
    int j = 0,k = 0;
    double[] ans = new double[mid + 1];
    while(j + k <= mid)
    {
        if(j >= len1 && k >= len2)
            break; 
        if(j >= len1)
        {
            ans[j + k] = nums2[k];
            k ++;
        }
        else if(k >= len2)
        {
            ans[j + k] = nums1[j];
            j ++;
        }
        else if(nums1[j] > nums2[k])
        {
            ans[j + k] = nums2[k];
            k ++; 
        }
        else
        {
            ans[j + k] = nums1[j];
            j ++;
        }
    }
    if((len1 + len2) % 2 != 0)
        return ans[mid];
    else
        return (ans[mid] + ans[mid - 1]) / 2; 
    }
}

Alternate Approach : Binary Search
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length,len2 = nums2.length;
        if(len1 > len2)
            return findMedianSortedArrays(nums2,nums1);
        int mid1,mid2;
        int l = 0,r = len1;
        int aleft,bleft,aright,bright;
        while(l <= r)
        {
            mid1 = (l + r) / 2;
            mid2 = (len1 + len2 + 1) / 2 - mid1;
            aleft = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            aright = (mid1 >= len1) ? Integer.MAX_VALUE : nums1[mid1];
            bleft = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            bright = (mid2 >= len2) ? Integer.MAX_VALUE : nums2[mid2];
            if(aleft <= bright && bleft <= aright)
            {
                if((len1 + len2) % 2 != 0)
                    return Math.max(aleft,bleft);
                else
                    return (Math.max(aleft,bleft) + Math.min(aright,bright)) / 2.0;
            }
            else if(aleft > bright)
                r = mid1 - 1;
            else
                l = mid1 + 1; 
        }
        return 0.0;
    }
}
