Problem : Min Stack
Difficulty : Medium
URL : https://leetcode.com/problems/min-stack/
Approach : Create stack for storing minimum value.Update stack when value is lower/equal to top of stack.
Code :

class MinStack {
    private ArrayList<Integer> stack;
    private ArrayList<Integer> minStack;
    public MinStack() {
        this.stack = new ArrayList<>();
        this.minStack = new ArrayList<>();  
        minStack.add(Integer.MAX_VALUE);  
    }
    
    public void push(int val) {
        stack.add(val);
        if(val <= minStack.get(minStack.size() - 1))
            minStack.add(val);
    }
    
    public void pop() {
        int last = stack.remove(stack.size() - 1);
        if(last == minStack.get(minStack.size() - 1))
            minStack.remove(minStack.size() - 1);
    }
    
    public int top() {
        return stack.get(stack.size() - 1);
    }
    
    public int getMin() {
        return minStack.get(minStack.size() - 1);
    }
}

Alternate Approach : 
class MinStack {
    private Node head;
    public void push(int val) {
        if(head==null) head = new Node(val, val, null);
        else head = new Node(val, Math.min(val, head.min), head);
    }
    
    public void pop() {
        head = head.next;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
    private class Node{
        int val;
        int min;
        Node next;

        private Node(int val, int min, Node next){
            this.val = val;
            this.min = min;
            this.next = next;
        }
    }
}

