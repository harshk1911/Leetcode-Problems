//Problem : Ones and Zeroes
//Difficulty : Medium
//Link : https://leetcode.com/problems/ones-and-zeroes/description/
//My Approach : Used Top Down DP
//Code
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int[][][] dp = new int[strs.length + 1][m + 1][n + 1];
        for(int i = 1;i <= strs.length;i ++)
        {
            int Zeroes = 0;
            for(int l = 0;l < strs[i-1].length();l ++)
            {
                if(strs[i-1].charAt(l) == '0')
                    Zeroes ++;
            }
            int Ones = strs[i-1].length() - Zeroes;
            for(int j = 0;j <= m;j ++)
            {
                for(int k = 0;k <= n;k ++)
                {
                    if(j == 0 && k == 0)
                        dp[i][j][k] = 0;
                    else
                    {
                        if(Zeroes <= j && Ones <= k)
                        {
                            dp[i][j][k] = Math.max(1 + dp[i-1][j-Zeroes][k-Ones],dp[i-1][j][k]);
                        }
                        else
                        {
                            dp[i][j][k] = dp[i-1][j][k];
                        }               
                    }
                }
            }
        }
        return dp[strs.length][m][n];
    }
}

//Better Approach : Use Bottom Up DP
//Code
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int[][] dp = new int[m + 1][n + 1];
        for(int i = 1;i <= strs.length;i ++)
        {
            int Zeroes = 0;
            for(int l = 0;l < strs[i-1].length();l ++)
            {
                if(strs[i-1].charAt(l) == '0')
                    Zeroes ++;
            }
            int Ones = strs[i-1].length() - Zeroes;
            for(int j = m;j >= Zeroes;j --)
            {
                for(int k = n;k >= Ones;k --)
                {    
                    dp[j][k] = Math.max(1 + dp[j-Zeroes][k-Ones],dp[j][k]);               
                }
            }
        }
        return dp[m][n];
    }
}
