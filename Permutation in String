Problem : Permutation in String
Difficulty : Medium
URL : https://leetcode.com/problems/permutation-in-string/description/
Approach : Use sliding window
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] arr = new int[26];
        int[] perm = new int[26];
        int len1 = s1.length();
        int len2 = s2.length();
        int l = 0,r = 0;
        if(len1 > len2)
            return false;
        for(int i = 0;i < len1;i ++)
        {
            ++arr[s1.charAt(i) - 'a'];
            ++perm[s1.charAt(i) - 'a'];
        }
        while(l < len2 && arr[s2.charAt(l) - 'a'] == 0)
            l ++;
        if(l == len2)
            return false;
        else
            r = l;
        while(r < len2 && (r - l + 1) <= len1)
        {
            if(arr[s2.charAt(r) - 'a'] == 0)
            {
                l = l + 1;
                r = l;
                arr = perm.clone();
            }
            else
            {
                --arr[s2.charAt(r) - 'a'];
                r ++;
            }
        }
        if((r - l) == len1)
            return true;
        return false;
    }
}
Approach : Create two arrays of length 26 indicating frequency of each alphabet in s1 and window of length s1 in s2. If frequency of all 26 character matches permutation is found.
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] s1count = new int[26];
        int[] s2count = new int[26];
        int len1 = s1.length();
        int len2 = s2.length();
        int matches = 0;
        if(len1 > len2)
            return false;
        for(int i = 0;i < len1;i ++)
        {
            s1count[s1.charAt(i) - 'a']++;
            s2count[s2.charAt(i) - 'a']++;
        }
        for(int j = 0;j < 26;j ++)
        {
            if(s1count[j] == s2count[j])
                matches ++;    
        }
        int left = 0;
        int index = 0;
        for(int right = len1;right < len2;right ++)
        {
            if(matches == 26)
                return true;
            index = s2.charAt(right) - 'a';
            s2count[index]++;
            if(s1count[index] == s2count[index])
                matches++;
            else if(s1count[index] + 1 == s2count[index])
                matches--;
            index = s2.charAt(left) - 'a';
            s2count[index]--;
            if(s1count[index] == s2count[index])
                matches++;
            else if(s1count[index] - 1 == s2count[index])
                matches--;
            left ++;
        }
        return (matches == 26);
    }
}
