Problem : Valid Palindrome
Difficulty : Easy
Problem : https://leetcode.com/problems/valid-palindrome/
My Approach : Remove non alphanumeric charaters from string and convert it into lowercase. Then check for palindrome.
class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder sub = new StringBuilder();
        int slen = s.length();
        for(int i = 0;i < slen;i ++)
        {
            char c = s.charAt(i);
            if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z'))
            {
                sub.append(c);
            }
            else if((c >= 'A' && c <= 'Z'))
            {
                sub.append(s.substring(i,i+1).toLowerCase());
            }
        }
        int len = sub.length();
        if(len == 0)
            return true;
        int i = 0;
        int j = len - 1;
        while(i <= j / 2)
        {
            if(sub.charAt(i) != sub.charAt(j - i))
                return false;
            i ++;
        }   
        return true;
    }
}

Better Approach : Check if string is palindrome without any conversion. Skip non alphanumeric characters while checking for palindrome. 
Use character wrapper class methods instead of using string methods.
class Solution {
    public boolean isPalindrome(String s) {
        if (s.isEmpty()) {
        	return true;
        }
        int start = 0;
        int last = s.length() - 1;
        while(start <= last) {
        	char currFirst = s.charAt(start);
        	char currLast = s.charAt(last);
        	if (!Character.isLetterOrDigit(currFirst )) {
        		start++;
        	} else if(!Character.isLetterOrDigit(currLast)) {
        		last--;
        	} else {
        		if (Character.toLowerCase(currFirst) != Character.toLowerCase(currLast)) {
        			return false;
        		}
        		start++;
        		last--;
        	}
        }
        return true;
    }
}
