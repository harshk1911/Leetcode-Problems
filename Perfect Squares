//Problem Name : Perfect Squares
//Difficulty : Medium
//Link : https://leetcode.com/problems/perfect-squares/
//My Approach : Use unbounded knapsack method

//Code
class Solution {
    public int numSquares(int n) {
        int k = (int) Math.floor(Math.sqrt(n));
        int[][] dp = new int[k + 1][n + 1];
        for(int j = 1;j <= n;j ++)
        {
            dp[0][j] = n;
        }
        for(int i = 1;i <= k;i ++)
        {
            for(int j = 1;j <= n;j ++)
            {
                if(i * i <= j)
                {
                    dp[i][j] = Math.min(1 + dp[i][j - i * i],dp[i - 1][j]);
                }
                else
                {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[k][n];
    }
}

//Optimal Solution : Use unbounded knapsack with 1D array
//Code
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;

        for(int i = 1; i <= n; i++){
            int min = Integer.MAX_VALUE;
            int j = 1;
            while(i - j * j >= 0){
                min = Math.min(min, dp[i - j * j] + 1);
                j++;
            }
            dp[i] = min;
        }

        return dp[n];
    }
}
