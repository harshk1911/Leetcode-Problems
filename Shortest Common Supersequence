//Problem Name : Shortest Common Supersequence
//Difficulty : Hard
//Link : https://leetcode.com/problems/shortest-common-supersequence/description/
//My Approach : Use DP Longest Common Subsequence Method
//Code
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        int i = 0,j = 0;
        for(i = 1;i <= str1.length();i ++)
        {
            for(j = 1;j <= str2.length();j ++)
            {
                if(str1.charAt(i - 1) == str2.charAt(j - 1))
                    dp[i][j] = dp[i-1][j-1] + 1;
                else
                    dp[i][j] = Math.max(dp[i][j-1],dp[i-1][j]);
            }
        }
        String res = "";
        i --;
        j --;
        while(i > 0 && j > 0)
        {
            if(str1.charAt(i - 1) == str2.charAt(j - 1))
            {
                res = str1.charAt(i - 1) + res;
                i --;
                j --;
            }
            else
            {
                if(dp[i-1][j] > dp[i][j-1])
                {
                    res = str1.charAt(i - 1) + res;
                    i --;
                }
                else
                {
                    res = str2.charAt(j - 1) + res;
                    j --;
                }
            }
        }
        if(i > 0)
            res = str1.substring(0,i) + res;
        if(j > 0)
            res = str2.substring(0,j) + res;
        return res;
    }
}

Faster Solution
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        int[][] dp = new int[m+1][n+1];

        for(int i=0;i<=m;i++){
            dp[i][0] = i;
        }
        for(int j=0;j<=n;j++){
            dp[0][j] = j;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(str1.charAt(i-1) == str2.charAt(j-1)){
                    dp[i][j] = 1+dp[i-1][j-1];
                }else{
                    dp[i][j] = 1+Math.min(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        
        //return printSuperSequence(str1, str2, m, n, dp);

        StringBuilder builder = new StringBuilder();
        int i =m, j = n;
        while(i>0 && j>0){
            if(str1.charAt(i-1) == str2.charAt(j-1)){
                builder.append(str1.charAt(i-1));
                i--;
                j--;
            }else if(dp[i-1][j]>dp[i][j-1]){
                builder.append(str2.charAt(j-1));
                j--;
            }else{
                builder.append(str1.charAt(i-1));
                i--;
            }
        }
        while(i>0){
            builder.append(str1.charAt(i-1));
            i--;
        }
        while(j>0){
            builder.append(str2.charAt(j-1));
            j--;
        }
        return builder.reverse().toString();
    }
