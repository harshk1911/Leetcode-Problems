Problem : Search a 2D matrix
Difficulty : Medium
URL : https://leetcode.com/problems/search-a-2d-matrix/description/
Approach : Use binary search to solve the problem
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int mx = matrix.length;
        int my = matrix[0].length;
        int l = 0,r = mx * my - 1;
        int mid = 0;
        while(l <= r)
        {
            mid = (l + r)/2;
            if(matrix[mid / my][mid % my] == target)
                return true;
            if(matrix[mid / my][mid % my] > target)
                r = mid - 1;
            else
                l = mid + 1;
        }
        return false;   
    }
}

Another Approach : Check row in which target can be present. Traverse row to check if target is present.
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int a=-1;
       for(int i=0;i<matrix.length;i++){
           if(target<=matrix[i][matrix[matrix.length-1].length-1]) {
               a=i;
               break;
           }
       } if(a==-1) return false;
       for(int i=0;i<matrix[matrix.length-1].length;i++){
           if(target==matrix[a][i]) return true;
       }
       return false;
    }
}
