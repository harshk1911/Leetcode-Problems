//Problem : Minimum Insertion Steps to Make a String Palindrome
//Difficulty : Hard
//Link : https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/
//My Approach : Used Longest Common Subsequence of string and reverse of string. Return difference between length of string and LCS
//Code
class Solution {
    public int minInsertions(String s) {
        StringBuilder sub = new StringBuilder();
        sub.append(s);
        sub.reverse();
        String reverse = sub.toString();
        if(s.equals(reverse))
            return 0;
        int len = s.length();
        int[][] dp = new int[len + 1][len + 1];
        for(int i = 1;i <= len;i ++)
        {
            for(int j = 1;j <= len;j ++)
            {
                if(s.charAt(i-1) == reverse.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return len - dp[len][len];
    }
}
