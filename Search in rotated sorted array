Problem : Search in rotated sorted array
Difficulty : Medium
URL : https://leetcode.com/problems/search-in-rotated-sorted-array/description/
Approach : Find minimum of rotated sorted array and divide into two increasing arrays. Later check target in possible increasing array.
class Solution {
    public int search(int[] nums, int target) {
        int l = 0,r = nums.length - 1;
        int mid = 0;
        while(l < r)
        {
            mid = l + (r - l) / 2;
            if(nums[mid] > nums[r])
                l = mid + 1;
            else
                r = mid;
        }
        if(target >= nums[l] && target <= nums[nums.length - 1])
            r = nums.length - 1;
        else
        {
            r = l - 1;
            l = 0;
        }
        while(l <= r)
        {
            mid = l + (r - l) / 2;
            if(nums[mid] == target)
                return mid;
            if(nums[mid] < target)
                l = mid + 1;
            else
                r = mid - 1;
        }
        return -1;
    }
}

Better Approach : Use binary search directly.
class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;                
            if (nums[mid] == target) return mid;
            
            if (nums[mid] >= nums[low]) {
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }                
            }
        }
        return -1;
    }
}
