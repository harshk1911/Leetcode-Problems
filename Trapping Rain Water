//Problem : Trapping Rain Water
//Difficulty : Hard
//Link : https://leetcode.com/problems/trapping-rain-water/description/
//Approach : Water level at each index will be minimum of maximum height at left and maximum height at right. Sum of water level - height at that index will give result.
//Code
class Solution {
    public int trap(int[] height) {
        int sum = 0;
        int temp = 0;
        int[] maxleft = new int[height.length];
        int[] maxright = new int[height.length];
        maxleft[0] = 0;
        for(int i = 1;i < height.length;i ++)
        {
            maxleft[i] = Math.max(maxleft[i-1],height[i-1]);
        }
        maxright[height.length - 1] = 0;
        for(int i = height.length - 2;i >= 0;i --)
        {
            maxright[i] = Math.max(maxright[i + 1],height[i + 1]);
        }
        for(int i = 1;i < height.length - 1;i ++)
        {
            temp = Math.min(maxleft[i],maxright[i]);
            if(temp > height[i])
            {
                sum = sum + temp - height[i];
            }
        }
        return sum;
    }
}

//Better Approach : Use Two pointers
class Solution {
    public int trap(int[] height) {
        int maxLeft = height[0];
        int maxRight = height[height.length - 1];
        int left = 0;
        int right = height.length - 1;
        int res = 0;
        if (height.length < 3) {
            return 0;
        }
        while(left < right) {
            if (maxLeft < maxRight) {
                left++;
                res+= Math.max(maxLeft - height[left], 0);
                maxLeft = Math.max(maxLeft, height[left]);
            } else {
                right--;
                res+= Math.max(maxRight - height[right], 0);
                maxRight = Math.max(maxRight, height[right]);
            }
        }
        return  res;
    }
}
