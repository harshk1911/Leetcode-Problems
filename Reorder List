Problem : Reorder List
URL : https://leetcode.com/problems/reorder-list/description/
Difficulty : Medium
Approach 1 : Reverse List and store in new List. Merge list with reversed list till middle half.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head.next == null)
            return;
        ListNode prev = null;
        ListNode curr1 = new ListNode(head.val,head.next);
        int n = 1;
        //Reverse List and store it in new list
        while(curr1.next != null)
        {
            ListNode nxt1 = new ListNode(curr1.next.val,curr1.next.next);
            curr1.next = prev;
            prev = curr1;
            curr1 = nxt1;
            n ++;
        }
        //Merge original and reversed list till middle
        curr1.next = prev;
        ListNode curr2 = head;
        int i = 0;
        while(i < (n - 1))
        {
            if(i % 2 == 0)
            {
                ListNode nxt2 = curr2.next;
                curr2.next = curr1;
                curr2 = nxt2;
            }
            else
            {
                ListNode nxt3 = curr1.next;
                curr1.next = curr2;
                curr1 = nxt3;
            }
            i ++;
        }
        if(n % 2 == 0)
            curr1.next = null;
        else
            curr2.next = null;
    }
}

Approach 2 : Reverse second half of list. Merge first half and reversed second half
class Solution {
    public void reorderList(ListNode head) {
        //slow and fast pointers are used to identify middle of list
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        //Below code will reverse second half of list
        ListNode second = slow.next;
        slow.next = null;
        ListNode prev = null;
        while(second != null)
        {
            ListNode nxt = second.next;
            second.next = prev;
            prev = second;
            second = nxt;
        }
        //Merger of first and reversed second half of list.
        ListNode first = head;
        second = prev;
        while(second != null)
        {
            ListNode nxt1 = first.next;
            ListNode nxt2 = second.next;
            first.next = second;
            second.next = nxt1;
            first = nxt1;
            second = nxt2;
        }
    }
}
