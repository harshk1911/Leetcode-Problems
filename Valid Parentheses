Problem : Valid Parentheses
URL : https://leetcode.com/problems/valid-parentheses/description/
Approach : Add character of string to stack. While adding check if closing bracket has found matching opening bracket at top of stack. If found pop top of stack else add character to top of stack
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        int i = 0;
        stack.push(s.charAt(i));
        i += 1;
        while(i < s.length())
        {
            char c = s.charAt(i);
            if(stack.empty())
            {
                stack.push(c);
                i += 1;
                continue;
            }
            char top = stack.peek();
            //ASCII for '(',')' differs by 1.
            //ASCII for '{','}' differs by 2
            //ASCII for '[',']' differs by 2
            if((c - top == 1) || (c - top) == 2)
            {
                stack.pop();
            }
            else
            {
                stack.push(c);
            }
            i += 1;
        }
        return stack.empty();
    }
}
//Better Approach : 
class Solution {
    public boolean isValid(String s) {
        char[]  arr = s.toCharArray();
        int n = arr.length;
        ArrayList<Character> stack = new ArrayList<>();
        for(char c : arr){
            if( c == '(' || c =='{' || c=='[') {
                stack.add(c);
                continue;
                } 
            if((stack.size()==0) && (c == ')' || c =='}' || c==']')) return false;
            if(c == ')' &&  stack.get(stack.size()-1) == '('){
            stack.remove(stack.size()-1 );
            }else   if(c == '}' &&  stack.get(stack.size()-1) == '{'){
            stack.remove(stack.size()-1 );
            }else   if(c == ']' &&  stack.get(stack.size()-1) == '['){
            stack.remove(stack.size()-1);
            }else{
                return false;
            }
        }
        if(stack.size() == 0) return true;
        else return false;
    }
}
