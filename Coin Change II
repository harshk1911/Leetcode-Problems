//Problem Name : Coin Change II
//Difficulty : Medium
//Link : https://leetcode.com/problems/coin-change-ii/
//My Approach : Use unbounded knapsack method
//Code

class Solution {
    public int change(int amount, int[] coins) {
        int[][] dp = new int[coins.length + 1][amount + 1];
        for(int i = 0;i <= coins.length;i ++)
        {
            dp[i][0] = 1;
        }
        for(int i = 1;i <= coins.length;i ++)
        {
            for(int j = 1;j <= amount;j ++)
            {
                if(coins[i-1] <= j)
                {
                    dp[i][j] = dp[i][j - coins[i-1]] + dp[i-1][j];
                }
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        return dp[coins.length][amount];
    }
}

//Optimal Solution : Use unbounded knapsack with 1D array
public int change(int amount, int[] coins) {
        int[] dp = new int[amount+1];
        dp[0] = 1;
        for(int coin : coins){
            for(int a = coin; a <= amount; a++){
                dp[a] += dp[a-coin];
            }
        }
        return dp[amount];
    }
